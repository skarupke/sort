#  Boost sorting_algo library test suite Jamfile  ----------------------------
#
#  Copyright Steven Ross 2009. Use, modification and
#  distribution is subject to the Boost Software License, Version
#  1.0. (See accompanying file LICENSE_1_0.txt or copy at
#  http://www.boost.org/LICENSE_1_0.txt)
#
#  See http://www.boost.org/libs/sort for library home page.

import ../../config/checks/config : requires ;
import testing ;

{
  test-suite "sort"
    : [ run integer_sort_test.cpp
       : : : : integer_sort ]
  [ run float_sort_test.cpp
       : : : : float_sort ]
  [ run string_sort_test.cpp
       : : : : string_sort ]
  [ run sort_detail_test.cpp
       : : : : sort_detail ]

  [ run test_pdqsort.cpp
       : : : [ requires
                cxx11_hdr_random ] <optimization>speed : test_pdqsort ]

  [ run test_flat_stable_sort.cpp
       : : : [ requires
                cxx11_constexpr
                cxx11_noexcept ] <optimization>speed : test_flat_stable_sort ]

  [ run test_spinsort.cpp
       : : : [ requires
                cxx11_constexpr
                cxx11_noexcept ] <optimization>speed : test_spinsort ]

  [ run test_insert_sort.cpp
       : : : [ requires
                cxx11_constexpr
                cxx11_noexcept ] <optimization>speed : test_insert_sort ]


  [ run test_block_indirect_sort.cpp
       : : :  [ requires
                    cxx11_constexpr
                    cxx11_noexcept
                    cxx11_thread_local
                    cxx11_lambdas ] <optimization>speed <threading>multi : test_block_indirect_sort ]

  [ run test_sample_sort.cpp
       : : :  [ requires
                    cxx11_constexpr
                    cxx11_noexcept
                    cxx11_thread_local
                    cxx11_lambdas ] <optimization>speed <threading>multi : test_sample_sort ]

  [ run test_parallel_stable_sort.cpp
       : : : [ requires
                    cxx11_constexpr
                    cxx11_noexcept
                    cxx11_thread_local
                    cxx11_lambdas ] <optimization>speed <threading>multi : test_parallel_stable_sort ]

  [ run ska_sort_tests/test_unroll_loop.cpp
       : : : [ requires
                    cxx17_if_constexpr ]
                 <cxxstd>17 : test_unroll_loop ]

  [ run ska_sort_tests/test_ska_sort_memory.cpp
       : : : [ requires
                    cxx17_if_constexpr ]
                 <cxxstd>17 : test_ska_sort_memory ]

  [ run ska_sort_tests/test_ska_sort_optional.cpp
       : : : [ requires
                    cxx17_if_constexpr
                    cxx17_hdr_optional ]
                 <cxxstd>17 : test_ska_sort_optional ]

  [ run ska_sort_tests/test_ska_sort_variant.cpp
       : : : [ requires
                    cxx17_if_constexpr
                    cxx17_hdr_variant ]
                 <cxxstd>17 : test_ska_sort_variant ]

  [ run ska_sort_tests/test_ska_sort_tuple.cpp
       : : : [ requires
                    cxx17_if_constexpr ]
                 <cxxstd>17 : test_ska_sort_tuple ]

  [ run ska_sort_tests/test_ska_sort_simple.cpp
       : : : [ requires
                    cxx17_if_constexpr ]
                 <cxxstd>17 : test_ska_sort_simple ]

  [ run ska_sort_tests/test_ska_sort_big.cpp
       : : : [ requires
                    cxx17_if_constexpr ]
                 <cxxstd>17 : test_ska_sort_big ]

  [ run ska_sort_tests/test_ska_sort_string.cpp
       : : : [ requires
                    cxx17_if_constexpr ]
                 <cxxstd>17 : test_ska_sort_string ]

  [ run ska_sort_tests/test_ska_sort_simple_container.cpp
       : : : [ requires
                    cxx17_if_constexpr ]
                 <cxxstd>17 : test_ska_sort_simple_container ]

  [ run ska_sort_tests/test_ska_sort_nested_container.cpp
       : : : [ requires
                    cxx17_if_constexpr ]
                 <cxxstd>17 : test_ska_sort_nested_container ]

  [ run ska_sort_tests/test_fixed_size_bit_set.cpp
       : : : <cxxstd>17 : test_fixed_size_bit_set ]
   ;
}
