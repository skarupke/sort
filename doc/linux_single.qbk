[/===========================================================================
 Copyright (c) 2019 Steven Ross, Francisco Tapia, Orson Peters, Malte Skarupke


 Distributed under the Boost Software License, Version 1.0
 See accompanying file LICENSE_1_0.txt or copy at
 http://www.boost.org/LICENSE_1_0.txt
=============================================================================/]

[section:linux_single 2.6.- Linux Benchmarks]


[:
This library contains a benchmark folder with programs to measure the speed of the algorithms on your machine and operating system.
These are short benchmarks to test speed with different kinds of data ( random, sorted, sorted plus unsorted append at end ...)

The benchmark ran on a AMD Ryzen 7 1700 with 32 GB of RAM. The Operating System was Ubuntu 18.04, and the compiler Clang 8.0.
]

[section:near_sorted Near Sorted Data]
[:
[h4[_Near Sorted Data With 100 000 000 64 bits Integers]]

benchmark/single/benchmark_numbers.cpp : This benchmark shows the results obtained with several kind of integers numbers (random and near sorted).

The benchmark results for nearly-sorted strings and objects are similar and are not shown here, but can be obtained by running benchmark_strings.cpp and benchmarks_objects.cpp. The results of those benchmarks on random data can be seen in the next section.

[*[teletype]
``
                                |           |           |std::      |           |flat_      |           |           |
                                | std::sort | pdqsort   |stable_sort| spin_sort |stable_sort|spreadsort | ska_sort  |
    ----------------------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
    random                      |    8.76   |   4.44    |   10.99   |    5.19   |    7.40   |    4.49   |   2.12    |
                                |           |           |           |           |           |           |           |
    sorted                      |    1.58   |   0.13    |    3.01   |    0.05   |    0.06   |    0.05   |   1.18    |
    sorted + 0.1% end           |    5.19   |   3.29    |    3.00   |    0.56   |    0.50   |    3.22   |   1.70    |
    sorted +   1% end           |    9.30   |   3.78    |    3.10   |    1.08   |    0.54   |    3.52   |   1.97    |
    sorted +  10% end           |    6.91   |   4.56    |    4.04   |    1.06   |    1.16   |    4.34   |   2.32    |
                                |           |           |           |           |           |           |           |
    sorted + 0.1% mid           |    3.90   |   3.67    |    3.41   |    3.88   |    3.31   |    3.25   |   1.92    |
    sorted +   1% mid           |    3.81   |   4.03    |    3.62   |    4.23   |    4.18   |    3.79   |   2.13    |
    sorted +  10% mid           |    6.31   |   5.19    |    5.51   |    5.40   |    6.16   |    5.16   |   2.61    |
                                |           |           |           |           |           |           |           |
    reverse sorted              |    1.17   |   0.36    |    3.16   |    0.12   |    0.13   |    1.84   |   1.90    |
    rv sorted + 0.1% end        |    6.30   |   3.52    |    3.24   |    0.72   |    0.48   |    3.04   |   1.88    |
    rv sorted +   1% end        |    4.27   |   3.72    |    3.35   |    1.21   |    0.62   |    3.46   |   2.05    |
    rv sorted +  10% end        |    4.40   |   4.66    |    4.29   |    1.24   |    1.22   |    4.42   |   2.28    |
                                |           |           |           |           |           |           |           |
    rv sorted + 0.1% mid        |    3.90   |   3.65    |    3.41   |    3.88   |    3.31   |    3.25   |   1.85    |
    rv sorted +   1% mid        |    3.82   |   4.11    |    3.55   |    4.22   |    4.18   |    3.80   |   2.16    |
    rv sorted +  10% mid        |    6.29   |   5.25    |    5.51   |    5.40   |    6.17   |    5.16   |   2.67    |

``
]
]
[endsect]

[section:complex_benchmarks Complex (Several Types)]
[:
This section shows the result of the "random" row in the table in the previous section together with the memory usage of the algorithms. The memory usage was calculated using David Robert Nadeau's [@http://nadeausoftware.com/articles/2012/07/c_c_tip_how_get_process_resident_set_size_physical_memory_use getCurrentRSS].

There are 3 types of benchmarks,
[:
*64 bits integers

*strings

*objects of several sizes.

The objects are arrays of integers. The heavy comparison sums all the elements in each, and the light comparison uses only the first number of the array.

]
[h4[_100 000 000 Numbers of 64 bits Randomly Filled]]

[*[teletype]
``
                          |             |             |
                          |             |  Additional |
                          | Time (secs) | Memory Used |
    ----------------------+--------------+------------+
     ska_sort             |     2.12    |  < 0.1 MB   |
     pdqsort              |     4.44    |  < 0.1 MB   |
     spreadsort           |     4.49    |  < 0.1 MB   |
     spinsort             |     5.19    |  381.3 MB   |
     flat_stable_sort     |     7.40    |    2.8 MB   |
     std::sort            |     8.76    |  < 0.1 MB   |
     std::stable_sort     |    10.99    |  381.6 MB   |
                          |             |             |
``
]

[h4[_10 000 000  Strings Randomly Filled]]

[*[teletype]
``
                          |             |             |
                          |             |  Additional |
                          | Time (secs) | Memory Used |
    ----------------------+--------------+------------+
     ska_sort             |     1.55    |  < 0.1 MB   |
     spreadsort           |     5.10    |  316.0 MB   |
     std::sort            |     7.22    |  < 0.1 MB   |
     pdqsort              |     7.35    |  < 0.1 MB   |
     spinsort             |    11.20    |  152.4 MB   |
     flat_stable_sort     |    12.49    |    2.6 MB   |
     std::stable_sort     |    15.69    |  305.3 MB   |
                          |             |             |
``
]

[h4[_Objects Randomly Filled]]
[:
The objects are arrays of 64 bits numbers

They are compared in two ways :
[:
     (H) Heavy : The comparison is the sum of all the numbers of the array.

     (L) Light : The comparison is using only the first element of the array,
                 as a key
]
]

[*[teletype]
``
                     |           |           |           |           |            |
                     |  25000000 |  12500000 |   6250000 |   1562500 |            |
                     | objects of| objects of| objects of| objects of| Additional |
                     | 32 bytes  | 64 bytes  | 128 bytes | 512 bytes |   Memory   |
                     |           |           |           |           |    Used    |
                     |  H     L  |  H     L  |  H     L  |  H     L  |            |
    -----------------+-----------+-----------+-----------+-----------+------------+
    ska_sort         | 0.88  0.75| 0.71  0.60| 0.64  0.51| 0.54  0.48|  < 0.1 MB  |
    spreadsort       | 2.56  1.94| 1.46  1.08| 0.92  0.67| 0.75  0.56|  < 0.1 MB  |
    pdqsort          | 3.19  2.42| 1.96  1.44| 1.32  1.06| 1.13  0.98|  < 0.1 MB  |
    std::sort        | 3.36  2.44| 2.10  1.47| 1.42  1.11| 1.33  1.06|  < 0.1 MB  |
    spinsort         | 3.95  2.75| 2.43  1.82| 1.85  1.46| 2.02  1.83|  381.3 MB  |
    std::stable_sort | 4.19  3.31| 2.90  2.52| 2.55  2.32| 2.94  3.04|  381.3 MB  |
    flat_stable_sort | 5.47  4.12| 3.53  2.64| 2.25  1.78| 1.70  1.84|    2.8 MB  |
                     |           |           |           |           |            |
``
]
]
[endsect]
[endsect]


